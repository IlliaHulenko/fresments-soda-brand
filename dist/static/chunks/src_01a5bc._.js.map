{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Programing/Projects/NextJS/3D_Refrescos_brand/refrescos-brand/src/components/Bounded.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport clsx from \"clsx\";\r\n\r\ntype BoundedProps = {\r\n  as?: React.ElementType;\r\n  className?: string;\r\n  children: React.ReactNode;\r\n};\r\n\r\nexport const Bounded: React.FC<BoundedProps> = ({  \r\n  className,\r\n  children,\r\n  ...restProps\r\n}) => {\r\n  return (    \r\n    <div\r\n      className={clsx(\"px-4 first:pt-10 md:px-6\", className as string)}\r\n      {...restProps}\r\n    >\r\n      <div className=\"mx-auto flex w-full max-w-7xl flex-col items-center\">\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n};"],"names":[],"mappings":"AAAA,qDAAqD;;;;AACrD;;;AAQO,MAAM,UAAkC,CAAC,EAC9C,SAAS,EACT,QAAQ,EACR,GAAG,WACJ;IACC,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,wIAAA,CAAA,UAAI,AAAD,EAAE,4BAA4B;QAC3C,GAAG,SAAS;kBAEb,cAAA,6LAAC;YAAI,WAAU;sBACZ;;;;;;;;;;;AAIT;KAfa"}},
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 44, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Programing/Projects/NextJS/3D_Refrescos_brand/refrescos-brand/src/components/SodaCan.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useGLTF, useTexture } from \"@react-three/drei\";\r\nimport * as THREE from \"three\";\r\n\r\nuseGLTF.preload(\"/Soda-can.gltf\");\r\n\r\nconst flavorTextures = {\r\n  lemonLime: \"/labels/lemon-lime.png\",\r\n  grape: \"/labels/grape.png\",\r\n  blackCherry: \"/labels/cherry.png\",\r\n  strawberryLemonade: \"/labels/strawberry.png\",\r\n  watermelon: \"/labels/watermelon.png\",\r\n};\r\n\r\nconst metalMaterial = new THREE.MeshStandardMaterial({\r\n  roughness: 0.3,\r\n  metalness: 1,\r\n  color: \"#bbbbbb\",\r\n});\r\n\r\nexport type SodaCanProps = {\r\n  flavor?: keyof typeof flavorTextures;\r\n  scale?: number;\r\n};\r\n\r\nexport function SodaCan({\r\n  flavor = \"blackCherry\",\r\n  scale = 2,\r\n  ...props\r\n}: SodaCanProps) {\r\n  const { nodes } = useGLTF(\"/Soda-can.gltf\");\r\n\r\n  const labels = useTexture(flavorTextures);\r\n  \r\n  // Fixes upside down labels\r\n  labels.strawberryLemonade.flipY = false;\r\n  labels.blackCherry.flipY = false;\r\n  labels.watermelon.flipY = false;\r\n  labels.grape.flipY = false;\r\n  labels.lemonLime.flipY = false;\r\n\r\n  const label = labels[flavor];\r\n\r\n  return (\r\n    <group {...props} dispose={null} scale={scale} rotation={[0, -Math.PI, 0]}>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={(nodes.cylinder as THREE.Mesh).geometry}\r\n        material={metalMaterial}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={(nodes.cylinder_1 as THREE.Mesh).geometry}\r\n      >\r\n        <meshStandardMaterial roughness={0.15} metalness={0.7} map={label} />\r\n      </mesh>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={(nodes.Tab as THREE.Mesh).geometry}\r\n        material={metalMaterial}\r\n      />\r\n    </group>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AAAA;AACA;;;AAHA;;;AAKA,2JAAA,CAAA,UAAO,CAAC,OAAO,CAAC;AAEhB,MAAM,iBAAiB;IACrB,WAAW;IACX,OAAO;IACP,aAAa;IACb,oBAAoB;IACpB,YAAY;AACd;AAEA,MAAM,gBAAgB,IAAI,qJAAM,oBAAoB,CAAC;IACnD,WAAW;IACX,WAAW;IACX,OAAO;AACT;AAOO,SAAS,QAAQ,EACtB,SAAS,aAAa,EACtB,QAAQ,CAAC,EACT,GAAG,OACU;;IACb,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE;IAE1B,MAAM,SAAS,CAAA,GAAA,8JAAA,CAAA,aAAU,AAAD,EAAE;IAE1B,2BAA2B;IAC3B,OAAO,kBAAkB,CAAC,KAAK,GAAG;IAClC,OAAO,WAAW,CAAC,KAAK,GAAG;IAC3B,OAAO,UAAU,CAAC,KAAK,GAAG;IAC1B,OAAO,KAAK,CAAC,KAAK,GAAG;IACrB,OAAO,SAAS,CAAC,KAAK,GAAG;IAEzB,MAAM,QAAQ,MAAM,CAAC,OAAO;IAE5B,qBACE,6LAAC;QAAO,GAAG,KAAK;QAAE,SAAS;QAAM,OAAO;QAAO,UAAU;YAAC;YAAG,CAAC,KAAK,EAAE;YAAE;SAAE;;0BACvE,6LAAC;gBACC,UAAU;gBACV,aAAa;gBACb,UAAU,AAAC,MAAM,QAAQ,CAAgB,QAAQ;gBACjD,UAAU;;;;;;0BAEZ,6LAAC;gBACC,UAAU;gBACV,aAAa;gBACb,UAAU,AAAC,MAAM,UAAU,CAAgB,QAAQ;0BAEnD,cAAA,6LAAC;oBAAqB,WAAW;oBAAM,WAAW;oBAAK,KAAK;;;;;;;;;;;0BAE9D,6LAAC;gBACC,UAAU;gBACV,aAAa;gBACb,UAAU,AAAC,MAAM,GAAG,CAAgB,QAAQ;gBAC5C,UAAU;;;;;;;;;;;;AAIlB;GAzCgB;;QAKI,2JAAA,CAAA,UAAO;QAEV,8JAAA,CAAA,aAAU;;;KAPX"}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Programing/Projects/NextJS/3D_Refrescos_brand/refrescos-brand/src/components/FloatingCan.tsx"],"sourcesContent":["\"use client\";\r\nimport { forwardRef } from 'react';\r\nimport { Float } from '@react-three/drei'\r\n\r\nimport { SodaCan, SodaCanProps } from '@/components/SodaCan'\r\nimport { Group } from 'three';\r\n\r\ntype FloatingCanProps = {\r\n    flavor?: SodaCanProps['flavor'];\r\n    floatSpeed?: number;\r\n    rotationIntensity?: number;\r\n    floatIntentsity?: number;\r\n    floatingRange?: [number, number];\r\n    shildren?: React.ReactNode;\r\n};\r\n\r\nconst FloatingCan = forwardRef<Group, FloatingCanProps>(\r\n    ({\r\n        flavor = 'blackCherry',\r\n        floatSpeed = 1.5,\r\n        rotationIntensity = 1,\r\n        floatIntentsity = 1,\r\n        floatingRange = [-.1, .1],\r\n        shildren,\r\n        ...props\r\n    }, ref ) => {\r\n        return (\r\n            <group ref={ref} {...props}>\r\n                <Float\r\n                    speed={floatSpeed} // Animation speed, defaults to 1\r\n                    rotationIntensity={rotationIntensity} // XYZ rotation intensity, defaults to 1\r\n                    floatIntensity={floatIntentsity} // Up/down float intensity, works like a multiplier with floatingRange,defaults to 1\r\n                    floatingRange={floatingRange} // Range of y-axis values the object will float within, defaults to [-0.1,0.1]\r\n                >\r\n                    {shildren}\r\n                    <SodaCan flavor={flavor}/>                    \r\n                </Float>\r\n            </group>\r\n        );\r\n    });\r\n\r\nFloatingCan.displayName = 'FloatingCan';\r\n\r\nexport default FloatingCan"],"names":[],"mappings":";;;;AACA;AAGA;AAFA;AAFA;;;;;AAgBA,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,OACzB,CAAC,EACG,SAAS,aAAa,EACtB,aAAa,GAAG,EAChB,oBAAoB,CAAC,EACrB,kBAAkB,CAAC,EACnB,gBAAgB;IAAC,CAAC;IAAI;CAAG,EACzB,QAAQ,EACR,GAAG,OACN,EAAE;IACC,qBACI,6LAAC;QAAM,KAAK;QAAM,GAAG,KAAK;kBACtB,cAAA,6LAAC,4JAAA,CAAA,QAAK;YACF,OAAO;YACP,mBAAmB;YACnB,gBAAgB;YAChB,eAAe;;gBAEd;8BACD,6LAAC,gIAAA,CAAA,UAAO;oBAAC,QAAQ;;;;;;;;;;;;;;;;;AAIjC;;AAEJ,YAAY,WAAW,GAAG;uCAEX"}},
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Programing/Projects/NextJS/3D_Refrescos_brand/refrescos-brand/src/hooks/useMediaQuery.ts"],"sourcesContent":["import { useCallback, useSyncExternalStore } from \"react\";\r\n\r\nexport function useMediaQuery(query: string, serverFallback: boolean): boolean {\r\n  const subscribe = useCallback(\r\n    (onStoreChange: () => void) => {\r\n      const mediaQueryList = matchMedia(query);\r\n      mediaQueryList.addEventListener(\"change\", onStoreChange);\r\n      return () => {\r\n        mediaQueryList.removeEventListener(\"change\", onStoreChange);\r\n      };\r\n    },\r\n    [query],\r\n  );\r\n\r\n  return useSyncExternalStore(\r\n    subscribe,\r\n    () => matchMedia(query).matches,\r\n    () => serverFallback,\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;;AAEO,SAAS,cAAc,KAAa,EAAE,cAAuB;;IAClE,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;gDAC1B,CAAC;YACC,MAAM,iBAAiB,WAAW;YAClC,eAAe,gBAAgB,CAAC,UAAU;YAC1C;wDAAO;oBACL,eAAe,mBAAmB,CAAC,UAAU;gBAC/C;;QACF;+CACA;QAAC;KAAM;IAGT,OAAO,CAAA,GAAA,6JAAA,CAAA,uBAAoB,AAAD,EACxB;8CACA,IAAM,WAAW,OAAO,OAAO;;8CAC/B,IAAM;;AAEV;GAjBgB;;QAYP,6JAAA,CAAA,uBAAoB"}},
    {"offset": {"line": 248, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 254, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Programing/Projects/NextJS/3D_Refrescos_brand/refrescos-brand/src/slices/SkyDive/Scene.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { Content } from \"@prismicio/client\";\r\nimport { Cloud, Clouds, Environment, Text } from \"@react-three/drei\";\r\nimport { useRef } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport gsap from \"gsap\";\r\nimport { useGSAP } from \"@gsap/react\";\r\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\r\n\r\nimport FloatingCan from \"@/components/FloatingCan\";\r\nimport { useMediaQuery } from \"@/hooks/useMediaQuery\";\r\n\r\ngsap.registerPlugin(useGSAP, ScrollTrigger);\r\n\r\ntype SkyDiveProps = {\r\n    sentence: string | null;\r\n    flavor: Content.SkyDiveSliceDefaultPrimary[\"flavor\"];\r\n};\r\n\r\nexport default function Scene({ sentence, flavor }: SkyDiveProps) {\r\n    const groupRef = useRef<THREE.Group>(null);\r\n    const canRef = useRef<THREE.Group>(null);\r\n    const cloud1Ref = useRef<THREE.Group>(null);\r\n    const cloud2Ref = useRef<THREE.Group>(null);\r\n    const cloudsRef = useRef<THREE.Group>(null);\r\n    const wordsRef = useRef<THREE.Group>(null);\r\n\r\n    const ANGLE = 75 * (Math.PI / 180);\r\n\r\n    const getXPosition = (distance: number) => distance * Math.cos(ANGLE);\r\n    const getYPosition = (distance: number) => distance * Math.sin(ANGLE);\r\n\r\n    const getXYPositions = (distance: number) => ({\r\n        x: getXPosition(distance),\r\n        y: getYPosition(-1 * distance),\r\n    });\r\n\r\n    useGSAP(() => {\r\n        if (\r\n            !cloudsRef.current ||\r\n            !canRef.current ||\r\n            !wordsRef.current ||\r\n            !cloud1Ref.current ||\r\n            !cloud2Ref.current\r\n        )\r\n            return;\r\n\r\n        // Set initial positions\r\n        gsap.set(cloudsRef.current.position, { z: 10 });\r\n        gsap.set(canRef.current.position, {\r\n            ...getXYPositions(-4),\r\n        });\r\n\r\n        gsap.set(\r\n            wordsRef.current.children.map((word) => word.position),\r\n            { ...getXYPositions(7), z: 2 },\r\n        );\r\n\r\n        // Spinning can\r\n        gsap.to(canRef.current.rotation, {\r\n            y: Math.PI * 2,\r\n            duration: 1.7,\r\n            repeat: -1,\r\n            ease: \"none\",\r\n        });\r\n\r\n        // Infinite cloud movement\r\n        const DISTANCE = 15;\r\n        const DURATION = 6;\r\n\r\n        gsap.set([cloud2Ref.current.position, cloud1Ref.current.position], {\r\n            ...getXYPositions(DISTANCE),\r\n        });\r\n\r\n        gsap.to(cloud1Ref.current.position, {\r\n            y: `+=${getYPosition(DISTANCE * 2)}`,\r\n            x: `+=${getXPosition(DISTANCE * -2)}`,\r\n            ease: \"none\",\r\n            repeat: -1,\r\n            duration: DURATION,\r\n        });\r\n\r\n        gsap.to(cloud2Ref.current.position, {\r\n            y: `+=${getYPosition(DISTANCE * 2)}`,\r\n            x: `+=${getXPosition(DISTANCE * -2)}`,\r\n            ease: \"none\",\r\n            repeat: -1,\r\n            delay: DURATION / 2,\r\n            duration: DURATION,\r\n        });\r\n\r\n        const scrollTl = gsap.timeline({\r\n            scrollTrigger: {\r\n                trigger: \".skydive\",\r\n                pin: true,\r\n                start: \"top top\",\r\n                end: \"+=2000\",\r\n                scrub: 1.5\r\n            }\r\n        });\r\n\r\n        scrollTl\r\n            .to(\"body\", {\r\n                backgroundColor: \"#C0F0F5\",\r\n                overwrite: \"auto\",\r\n                duration: 0.1,\r\n            })\r\n            .to(cloudsRef.current.position, { z: 0, duration: 0.3 }, 0)\r\n            .to(canRef.current.position, {\r\n                x: 0,\r\n                y: 0,\r\n                duration: 0.3,\r\n                ease: \"back.out(1.7)\",\r\n            })\r\n            .to(\r\n                wordsRef.current.children.map((word) => word.position),\r\n                {\r\n                    keyframes: [\r\n                        { x: 0, y: 0, z: -1 },\r\n                        { ...getXYPositions(-7), z: -7 },\r\n                    ],\r\n                    stagger: 0.3,\r\n                },\r\n                0,\r\n            )\r\n            .to(canRef.current.position, {\r\n                ...getXYPositions(4),\r\n                duration: 0.5,\r\n                ease: \"back.in(1.7)\",\r\n            })\r\n            .to(cloudsRef.current.position, { z: 7, duration: 0.5 });\r\n    });\r\n\r\n    return (\r\n        <group ref={groupRef}>\r\n            {/* Can */}\r\n            <group rotation={[0, 0, 0.5]}>\r\n                <FloatingCan\r\n                    ref={canRef}\r\n                    flavor={flavor}\r\n                    rotationIntensity={0}\r\n                    floatIntensity={3}\r\n                    floatSpeed={3}\r\n                >\r\n                    <pointLight intensity={30} color=\"#8C0413\" decay={0.6} />\r\n                </FloatingCan>\r\n            </group>\r\n\r\n            {/* Clouds */}\r\n            <Clouds ref={cloudsRef}>\r\n                <Cloud ref={cloud1Ref} bounds={[10, 10, 2]} />\r\n                <Cloud ref={cloud2Ref} bounds={[10, 10, 2]} />\r\n            </Clouds>\r\n\r\n            {/* Text */}\r\n            <group ref={wordsRef}>\r\n                {sentence && <ThreeText sentence={sentence} color=\"#F97315\" />}\r\n            </group>\r\n\r\n            {/* Lights */}\r\n            <ambientLight intensity={2} color=\"#9DDEFA\" />\r\n            <Environment files=\"/hdr/field.hdr\" environmentIntensity={1.5} />\r\n        </group>\r\n    );\r\n}\r\n\r\nfunction ThreeText({\r\n    sentence,\r\n    color = \"white\",\r\n}: {\r\n    sentence: string;\r\n    color?: string;\r\n}) {\r\n    const words = sentence.toUpperCase().split(\" \");\r\n\r\n    const material = new THREE.MeshLambertMaterial();\r\n    const isDesktop = useMediaQuery(\"(min-width: 950px)\", true);\r\n\r\n    return words.map((word: string, wordIndex: number) => (\r\n        <Text\r\n            key={`${wordIndex}-${word}`}\r\n            scale={isDesktop ? 1 : 0.5}\r\n            color={color}\r\n            material={material}\r\n            font=\"/fonts/Alpino-Variable.woff\"\r\n            fontWeight={900}\r\n            anchorX={\"center\"}\r\n            anchorY={\"middle\"}\r\n            characters=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ!,.?'\"\r\n        >\r\n            {word}\r\n        </Text>\r\n    ));\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 532, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 538, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Programing/Projects/NextJS/3D_Refrescos_brand/refrescos-brand/src/slices/SkyDive/index.tsx"],"sourcesContent":["\"use client\";\n\nimport { FC } from \"react\";\nimport { Content } from \"@prismicio/client\";\nimport { SliceComponentProps } from \"@prismicio/react\";\nimport { Bounded } from \"@/components/Bounded\";\nimport Scene from \"./Scene\";\nimport { View } from \"@react-three/drei\";\n\n/**\n * Props for `SkyDive`.\n */\nexport type SkyDiveProps = SliceComponentProps<Content.SkyDiveSlice>;\n\n/**\n * Component for \"SkyDive\" Slices.\n */\nconst SkyDive: FC<SkyDiveProps> = ({ slice }) => {\n  return (\n    <Bounded\n      data-slice-type={slice.slice_type}\n      data-slice-variation={slice.variation}\n      className=\"skydive h-screen\"\n    >\n      <h2 className=\"sr-only\">{slice.primary.sentence}</h2>\n      <View className=\"h-screen w-screen\">\n        <Scene \n          flavor={slice.primary.flavor} \n          sentence={slice.primary.sentence} \n        />\n      </View>\n    </Bounded>\n  );\n};\n\nexport default SkyDive;\n"],"names":[],"mappings":";;;;AAKA;AACA;AACA;AAPA;;;;;AAcA;;CAEC,GACD,MAAM,UAA4B,CAAC,EAAE,KAAK,EAAE;IAC1C,qBACE,6LAAC,gIAAA,CAAA,UAAO;QACN,mBAAiB,MAAM,UAAU;QACjC,wBAAsB,MAAM,SAAS;QACrC,WAAU;;0BAEV,6LAAC;gBAAG,WAAU;0BAAW,MAAM,OAAO,CAAC,QAAQ;;;;;;0BAC/C,6LAAC,0JAAA,CAAA,OAAI;gBAAC,WAAU;0BACd,cAAA,6LAAC,qIAAA,CAAA,UAAK;oBACJ,QAAQ,MAAM,OAAO,CAAC,MAAM;oBAC5B,UAAU,MAAM,OAAO,CAAC,QAAQ;;;;;;;;;;;;;;;;;AAK1C;KAhBM;uCAkBS"}},
    {"offset": {"line": 595, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}